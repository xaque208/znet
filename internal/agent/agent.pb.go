// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: internal/agent/agent.proto

package agent

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_agent_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_internal_agent_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_internal_agent_agent_proto_rawDescGZIP(), []int{0}
}

type Jails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jails []*Jail `protobuf:"bytes,1,rep,name=jails,proto3" json:"jails,omitempty"`
}

func (x *Jails) Reset() {
	*x = Jails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_agent_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jails) ProtoMessage() {}

func (x *Jails) ProtoReflect() protoreflect.Message {
	mi := &file_internal_agent_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jails.ProtoReflect.Descriptor instead.
func (*Jails) Descriptor() ([]byte, []int) {
	return file_internal_agent_agent_proto_rawDescGZIP(), []int{1}
}

func (x *Jails) GetJails() []*Jail {
	if x != nil {
		return x.Jails
	}
	return nil
}

type Jail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Jail) Reset() {
	*x = Jail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_agent_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jail) ProtoMessage() {}

func (x *Jail) ProtoReflect() protoreflect.Message {
	mi := &file_internal_agent_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jail.ProtoReflect.Descriptor instead.
func (*Jail) Descriptor() ([]byte, []int) {
	return file_internal_agent_agent_proto_rawDescGZIP(), []int{2}
}

func (x *Jail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Jail) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Jail) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output   []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Error    []byte `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ExitCode int32  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *CommandResult) Reset() {
	*x = CommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_agent_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResult) ProtoMessage() {}

func (x *CommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_agent_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResult.ProtoReflect.Descriptor instead.
func (*CommandResult) Descriptor() ([]byte, []int) {
	return file_internal_agent_agent_proto_rawDescGZIP(), []int{3}
}

func (x *CommandResult) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CommandResult) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CommandResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

var File_internal_agent_agent_proto protoreflect.FileDescriptor

var file_internal_agent_agent_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x05,
	0x4a, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x6a, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x61, 0x69,
	0x6c, 0x52, 0x05, 0x6a, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4a, 0x0a, 0x04, 0x4a, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x5a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0xb3, 0x01, 0x0a, 0x08, 0x4a, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x61, 0x69, 0x6c, 0x1a, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x4a, 0x61, 0x69, 0x6c, 0x1a, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x61, 0x69, 0x6c,
	0x1a, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x72, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x0c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x10, 0x5a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_agent_agent_proto_rawDescOnce sync.Once
	file_internal_agent_agent_proto_rawDescData = file_internal_agent_agent_proto_rawDesc
)

func file_internal_agent_agent_proto_rawDescGZIP() []byte {
	file_internal_agent_agent_proto_rawDescOnce.Do(func() {
		file_internal_agent_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_agent_agent_proto_rawDescData)
	})
	return file_internal_agent_agent_proto_rawDescData
}

var file_internal_agent_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_internal_agent_agent_proto_goTypes = []interface{}{
	(*Empty)(nil),         // 0: agent.Empty
	(*Jails)(nil),         // 1: agent.Jails
	(*Jail)(nil),          // 2: agent.Jail
	(*CommandResult)(nil), // 3: agent.CommandResult
}
var file_internal_agent_agent_proto_depIdxs = []int32{
	2, // 0: agent.Jails.jails:type_name -> agent.Jail
	0, // 1: agent.JailHost.List:input_type -> agent.Empty
	2, // 2: agent.JailHost.Restart:input_type -> agent.Jail
	2, // 3: agent.JailHost.Start:input_type -> agent.Jail
	2, // 4: agent.JailHost.Stop:input_type -> agent.Jail
	0, // 5: agent.Node.RunPuppetAgent:input_type -> agent.Empty
	0, // 6: agent.Node.PackageUpgrade:input_type -> agent.Empty
	1, // 7: agent.JailHost.List:output_type -> agent.Jails
	3, // 8: agent.JailHost.Restart:output_type -> agent.CommandResult
	3, // 9: agent.JailHost.Start:output_type -> agent.CommandResult
	3, // 10: agent.JailHost.Stop:output_type -> agent.CommandResult
	3, // 11: agent.Node.RunPuppetAgent:output_type -> agent.CommandResult
	3, // 12: agent.Node.PackageUpgrade:output_type -> agent.CommandResult
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_internal_agent_agent_proto_init() }
func file_internal_agent_agent_proto_init() {
	if File_internal_agent_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_agent_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_agent_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_agent_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_agent_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_agent_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_internal_agent_agent_proto_goTypes,
		DependencyIndexes: file_internal_agent_agent_proto_depIdxs,
		MessageInfos:      file_internal_agent_agent_proto_msgTypes,
	}.Build()
	File_internal_agent_agent_proto = out.File
	file_internal_agent_agent_proto_rawDesc = nil
	file_internal_agent_agent_proto_goTypes = nil
	file_internal_agent_agent_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JailHostClient is the client API for JailHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JailHostClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Jails, error)
	Restart(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error)
	Start(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error)
	Stop(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error)
}

type jailHostClient struct {
	cc grpc.ClientConnInterface
}

func NewJailHostClient(cc grpc.ClientConnInterface) JailHostClient {
	return &jailHostClient{cc}
}

func (c *jailHostClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Jails, error) {
	out := new(Jails)
	err := c.cc.Invoke(ctx, "/agent.JailHost/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jailHostClient) Restart(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.JailHost/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jailHostClient) Start(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.JailHost/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jailHostClient) Stop(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.JailHost/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JailHostServer is the server API for JailHost service.
type JailHostServer interface {
	List(context.Context, *Empty) (*Jails, error)
	Restart(context.Context, *Jail) (*CommandResult, error)
	Start(context.Context, *Jail) (*CommandResult, error)
	Stop(context.Context, *Jail) (*CommandResult, error)
}

// UnimplementedJailHostServer can be embedded to have forward compatible implementations.
type UnimplementedJailHostServer struct {
}

func (*UnimplementedJailHostServer) List(context.Context, *Empty) (*Jails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedJailHostServer) Restart(context.Context, *Jail) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedJailHostServer) Start(context.Context, *Jail) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedJailHostServer) Stop(context.Context, *Jail) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterJailHostServer(s *grpc.Server, srv JailHostServer) {
	s.RegisterService(&_JailHost_serviceDesc, srv)
}

func _JailHost_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JailHost_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).Restart(ctx, req.(*Jail))
	}
	return interceptor(ctx, in, info, handler)
}

func _JailHost_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).Start(ctx, req.(*Jail))
	}
	return interceptor(ctx, in, info, handler)
}

func _JailHost_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).Stop(ctx, req.(*Jail))
	}
	return interceptor(ctx, in, info, handler)
}

var _JailHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.JailHost",
	HandlerType: (*JailHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _JailHost_List_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _JailHost_Restart_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _JailHost_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JailHost_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/agent/agent.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	RunPuppetAgent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error)
	PackageUpgrade(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) RunPuppetAgent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.Node/RunPuppetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PackageUpgrade(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.Node/PackageUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	RunPuppetAgent(context.Context, *Empty) (*CommandResult, error)
	PackageUpgrade(context.Context, *Empty) (*CommandResult, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) RunPuppetAgent(context.Context, *Empty) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPuppetAgent not implemented")
}
func (*UnimplementedNodeServer) PackageUpgrade(context.Context, *Empty) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PackageUpgrade not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_RunPuppetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RunPuppetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Node/RunPuppetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RunPuppetAgent(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PackageUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PackageUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Node/PackageUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PackageUpgrade(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunPuppetAgent",
			Handler:    _Node_RunPuppetAgent_Handler,
		},
		{
			MethodName: "PackageUpgrade",
			Handler:    _Node_PackageUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/agent/agent.proto",
}
