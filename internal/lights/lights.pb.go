// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: internal/lights/lights.proto

package lights

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On         bool  `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	Brightness int32 `protobuf:"varint,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_lights_lights_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_internal_lights_lights_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_internal_lights_lights_proto_rawDescGZIP(), []int{0}
}

func (x *State) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *State) GetBrightness() int32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

type LightGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id     int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name   string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State  *State  `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Lights []int32 `protobuf:"varint,5,rep,packed,name=lights,proto3" json:"lights,omitempty"`
}

func (x *LightGroup) Reset() {
	*x = LightGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_lights_lights_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightGroup) ProtoMessage() {}

func (x *LightGroup) ProtoReflect() protoreflect.Message {
	mi := &file_internal_lights_lights_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightGroup.ProtoReflect.Descriptor instead.
func (*LightGroup) Descriptor() ([]byte, []int) {
	return file_internal_lights_lights_proto_rawDescGZIP(), []int{1}
}

func (x *LightGroup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LightGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LightGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LightGroup) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *LightGroup) GetLights() []int32 {
	if x != nil {
		return x.Lights
	}
	return nil
}

type Light struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State *State `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Light) Reset() {
	*x = Light{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_lights_lights_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Light) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Light) ProtoMessage() {}

func (x *Light) ProtoReflect() protoreflect.Message {
	mi := &file_internal_lights_lights_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Light.ProtoReflect.Descriptor instead.
func (*Light) Descriptor() ([]byte, []int) {
	return file_internal_lights_lights_proto_rawDescGZIP(), []int{2}
}

func (x *Light) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Light) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Light) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Light) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

type LightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LightRequest) Reset() {
	*x = LightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_lights_lights_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightRequest) ProtoMessage() {}

func (x *LightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_lights_lights_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightRequest.ProtoReflect.Descriptor instead.
func (*LightRequest) Descriptor() ([]byte, []int) {
	return file_internal_lights_lights_proto_rawDescGZIP(), []int{3}
}

type LightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lights []*Light      `protobuf:"bytes,1,rep,name=lights,proto3" json:"lights,omitempty"`
	Groups []*LightGroup `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *LightResponse) Reset() {
	*x = LightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_lights_lights_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightResponse) ProtoMessage() {}

func (x *LightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_lights_lights_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightResponse.ProtoReflect.Descriptor instead.
func (*LightResponse) Descriptor() ([]byte, []int) {
	return file_internal_lights_lights_proto_rawDescGZIP(), []int{4}
}

func (x *LightResponse) GetLights() []*Light {
	if x != nil {
		return x.Lights
	}
	return nil
}

func (x *LightResponse) GetGroups() []*LightGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

var File_internal_lights_lights_proto protoreflect.FileDescriptor

var file_internal_lights_lights_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22,
	0x81, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x05, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x0d, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x8f, 0x02,
	0x0a, 0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x12, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x15,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x4f, 0x66, 0x66, 0x12, 0x12, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x4f, 0x6e, 0x12, 0x12, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x11, 0x5a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_lights_lights_proto_rawDescOnce sync.Once
	file_internal_lights_lights_proto_rawDescData = file_internal_lights_lights_proto_rawDesc
)

func file_internal_lights_lights_proto_rawDescGZIP() []byte {
	file_internal_lights_lights_proto_rawDescOnce.Do(func() {
		file_internal_lights_lights_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_lights_lights_proto_rawDescData)
	})
	return file_internal_lights_lights_proto_rawDescData
}

var file_internal_lights_lights_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_internal_lights_lights_proto_goTypes = []interface{}{
	(*State)(nil),         // 0: lights.State
	(*LightGroup)(nil),    // 1: lights.LightGroup
	(*Light)(nil),         // 2: lights.Light
	(*LightRequest)(nil),  // 3: lights.LightRequest
	(*LightResponse)(nil), // 4: lights.LightResponse
}
var file_internal_lights_lights_proto_depIdxs = []int32{
	0, // 0: lights.LightGroup.state:type_name -> lights.State
	0, // 1: lights.Light.state:type_name -> lights.State
	2, // 2: lights.LightResponse.lights:type_name -> lights.Light
	1, // 3: lights.LightResponse.groups:type_name -> lights.LightGroup
	1, // 4: lights.Lights.Alert:input_type -> lights.LightGroup
	1, // 5: lights.Lights.Brightness:input_type -> lights.LightGroup
	1, // 6: lights.Lights.Off:input_type -> lights.LightGroup
	1, // 7: lights.Lights.On:input_type -> lights.LightGroup
	3, // 8: lights.Lights.Status:input_type -> lights.LightRequest
	4, // 9: lights.Lights.Alert:output_type -> lights.LightResponse
	4, // 10: lights.Lights.Brightness:output_type -> lights.LightResponse
	4, // 11: lights.Lights.Off:output_type -> lights.LightResponse
	4, // 12: lights.Lights.On:output_type -> lights.LightResponse
	4, // 13: lights.Lights.Status:output_type -> lights.LightResponse
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_internal_lights_lights_proto_init() }
func file_internal_lights_lights_proto_init() {
	if File_internal_lights_lights_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_lights_lights_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_lights_lights_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_lights_lights_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Light); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_lights_lights_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_lights_lights_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_lights_lights_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_lights_lights_proto_goTypes,
		DependencyIndexes: file_internal_lights_lights_proto_depIdxs,
		MessageInfos:      file_internal_lights_lights_proto_msgTypes,
	}.Build()
	File_internal_lights_lights_proto = out.File
	file_internal_lights_lights_proto_rawDesc = nil
	file_internal_lights_lights_proto_goTypes = nil
	file_internal_lights_lights_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LightsClient is the client API for Lights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightsClient interface {
	Alert(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
	Brightness(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
	Off(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
	On(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
	Status(ctx context.Context, in *LightRequest, opts ...grpc.CallOption) (*LightResponse, error)
}

type lightsClient struct {
	cc grpc.ClientConnInterface
}

func NewLightsClient(cc grpc.ClientConnInterface) LightsClient {
	return &lightsClient{cc}
}

func (c *lightsClient) Alert(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Alert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Brightness(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Brightness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Off(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Off", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) On(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/On", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Status(ctx context.Context, in *LightRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightsServer is the server API for Lights service.
type LightsServer interface {
	Alert(context.Context, *LightGroup) (*LightResponse, error)
	Brightness(context.Context, *LightGroup) (*LightResponse, error)
	Off(context.Context, *LightGroup) (*LightResponse, error)
	On(context.Context, *LightGroup) (*LightResponse, error)
	Status(context.Context, *LightRequest) (*LightResponse, error)
}

// UnimplementedLightsServer can be embedded to have forward compatible implementations.
type UnimplementedLightsServer struct {
}

func (*UnimplementedLightsServer) Alert(context.Context, *LightGroup) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alert not implemented")
}
func (*UnimplementedLightsServer) Brightness(context.Context, *LightGroup) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Brightness not implemented")
}
func (*UnimplementedLightsServer) Off(context.Context, *LightGroup) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Off not implemented")
}
func (*UnimplementedLightsServer) On(context.Context, *LightGroup) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method On not implemented")
}
func (*UnimplementedLightsServer) Status(context.Context, *LightRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterLightsServer(s *grpc.Server, srv LightsServer) {
	s.RegisterService(&_Lights_serviceDesc, srv)
}

func _Lights_Alert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Alert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Alert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Alert(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Brightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Brightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Brightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Brightness(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Off(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).On(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Status(ctx, req.(*LightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lights.Lights",
	HandlerType: (*LightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alert",
			Handler:    _Lights_Alert_Handler,
		},
		{
			MethodName: "Brightness",
			Handler:    _Lights_Brightness_Handler,
		},
		{
			MethodName: "Off",
			Handler:    _Lights_Off_Handler,
		},
		{
			MethodName: "On",
			Handler:    _Lights_On_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Lights_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/lights/lights.proto",
}
