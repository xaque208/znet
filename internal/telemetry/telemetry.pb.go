// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: internal/telemetry/telemetry.proto

package telemetry

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	inventory "github.com/xaque208/znet/internal/inventory"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_internal_telemetry_telemetry_proto protoreflect.FileDescriptor

var file_internal_telemetry_telemetry_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a,
	0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x81, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x39, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x4f, 0x54, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x49, 0x4f, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12,
	0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x71, 0x75, 0x65, 0x32, 0x30, 0x38, 0x2f, 0x7a,
	0x6e, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_internal_telemetry_telemetry_proto_goTypes = []interface{}{
	(*inventory.IOTDevice)(nil), // 0: inventory.IOTDevice
	(*inventory.NetworkID)(nil), // 1: inventory.NetworkID
	(*inventory.Empty)(nil),     // 2: inventory.Empty
}
var file_internal_telemetry_telemetry_proto_depIdxs = []int32{
	0, // 0: telemetry.Telemetry.ReportIOTDevice:input_type -> inventory.IOTDevice
	1, // 1: telemetry.Telemetry.ReportNetworkID:input_type -> inventory.NetworkID
	2, // 2: telemetry.Telemetry.ReportIOTDevice:output_type -> inventory.Empty
	2, // 3: telemetry.Telemetry.ReportNetworkID:output_type -> inventory.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_telemetry_telemetry_proto_init() }
func file_internal_telemetry_telemetry_proto_init() {
	if File_internal_telemetry_telemetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_telemetry_telemetry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_telemetry_telemetry_proto_goTypes,
		DependencyIndexes: file_internal_telemetry_telemetry_proto_depIdxs,
	}.Build()
	File_internal_telemetry_telemetry_proto = out.File
	file_internal_telemetry_telemetry_proto_rawDesc = nil
	file_internal_telemetry_telemetry_proto_goTypes = nil
	file_internal_telemetry_telemetry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryClient interface {
	ReportIOTDevice(ctx context.Context, in *inventory.IOTDevice, opts ...grpc.CallOption) (*inventory.Empty, error)
	ReportNetworkID(ctx context.Context, in *inventory.NetworkID, opts ...grpc.CallOption) (*inventory.Empty, error)
}

type telemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryClient(cc grpc.ClientConnInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) ReportIOTDevice(ctx context.Context, in *inventory.IOTDevice, opts ...grpc.CallOption) (*inventory.Empty, error) {
	out := new(inventory.Empty)
	err := c.cc.Invoke(ctx, "/telemetry.Telemetry/ReportIOTDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) ReportNetworkID(ctx context.Context, in *inventory.NetworkID, opts ...grpc.CallOption) (*inventory.Empty, error) {
	out := new(inventory.Empty)
	err := c.cc.Invoke(ctx, "/telemetry.Telemetry/ReportNetworkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServer is the server API for Telemetry service.
type TelemetryServer interface {
	ReportIOTDevice(context.Context, *inventory.IOTDevice) (*inventory.Empty, error)
	ReportNetworkID(context.Context, *inventory.NetworkID) (*inventory.Empty, error)
}

// UnimplementedTelemetryServer can be embedded to have forward compatible implementations.
type UnimplementedTelemetryServer struct {
}

func (*UnimplementedTelemetryServer) ReportIOTDevice(context.Context, *inventory.IOTDevice) (*inventory.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportIOTDevice not implemented")
}
func (*UnimplementedTelemetryServer) ReportNetworkID(context.Context, *inventory.NetworkID) (*inventory.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNetworkID not implemented")
}

func RegisterTelemetryServer(s *grpc.Server, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_ReportIOTDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(inventory.IOTDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).ReportIOTDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Telemetry/ReportIOTDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).ReportIOTDevice(ctx, req.(*inventory.IOTDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_ReportNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(inventory.NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).ReportNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Telemetry/ReportNetworkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).ReportNetworkID(ctx, req.(*inventory.NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportIOTDevice",
			Handler:    _Telemetry_ReportIOTDevice_Handler,
		},
		{
			MethodName: "ReportNetworkID",
			Handler:    _Telemetry_ReportNetworkID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/telemetry/telemetry.proto",
}
