{{- if eq .File.GetName "rpc.proto"}}
// Code generated, do not edit
package inventory

import (
	"context"

	"github.com/golang/protobuf/ptypes"
	log "github.com/sirupsen/logrus"

	"github.com/xaque208/znet/rpc"
)

// RPC Listener
type InventoryServer struct {
	inventory Inventory
}


  {{- $messageType := .File.MessageType }}
  {{- range .File.Service }}
    {{- $serviceName := .GetName }}
    {{- if eq $serviceName "Inventory"}}
    // .File.Service {{.GetName}}
      {{- range .Method }}
        {{- $methodName := .GetName }}
        {{- /* The streaming check likely should be checking if the name begins with List.  A new pattern should exist for Update/Delete, etc */}}
        {{- if .ServerStreaming}}
func (e *InventoryServer) {{.Name}}(req *{{.InputType|trimPrefix "."}}, stream rpc.{{$serviceName}}_{{$methodName}}Server) error {
  // .Method.Name {{.Name}}
  // .Method.InputType {{.InputType}}
  // .Method.OutputType {{.OutputType}}

	results, err := e.inventory.{{.Name}}()
	if err != nil {
		return err
	}
  {{ $outputType := .OutputType|trimPrefix "."}}

  // outputType: {{$outputType}}
	if results != nil {
		for _, r := range *results {
			xxx := &{{$outputType}}{}
      {{- range $messageType }}
        {{- /* Only deal with the current type when looping through all messages */}}
        {{- if eq ($outputType|trimPrefix "rpc.") .GetName}}
          {{- range .Field }}
            {{- if eq .GetType.String "TYPE_STRING" }}
              {{- if eq .GetLabel.String "LABEL_REPEATED" }}

      {{- /* Deref the pointer for repeated fields*/}}
      if r.{{.Name|camelCase}} != nil {
        xxx.{{.Name|camelCase}} = *r.{{.Name|camelCase}} // {{.GetType.String}}
      }
              {{- else }}
      xxx.{{.Name|camelCase}} = r.{{.Name|camelCase}} // {{.GetType.String}}
              {{- end }}
            {{- else }}
            // Unhandled Type
            // name: {{.GetName}}
            // type: {{.GetType.String}}
            // label: {{.GetLabel.String}}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}

      if err := stream.Send(xxx); err != nil {
        return err
      }
		}
	}

  return nil
      {{- end }}
}

      {{ end }}
    {{- end }}
  {{- end }}

func (r *InventoryServer) ListNetworkHosts_example(ctx context.Context, request *rpc.Empty) (*rpc.SearchResponse, error) {
	response := &rpc.SearchResponse{}

	hosts, err := r.inventory.ListNetworkHosts()
	if err != nil {
		return response, err
	}

	if hosts != nil {
		for _, h := range *hosts {
			host := &rpc.NetworkHost{
				Description:     h.Description,
				Dn:              h.Dn,
				Domain:          h.Domain,
				Group:           h.Group,
				Name:            h.Name,
				OperatingSystem: h.OperatingSystem,
				Platform:        h.Platform,
				Role:            h.Role,
				Type:            h.Type,
			}

			if h.InetAddress != nil {
				host.InetAddress = *h.InetAddress
			}

			if h.Inet6Address != nil {
				host.Inet6Address = *h.Inet6Address
			}

			if h.MacAddress != nil {
				host.MacAddress = *h.MacAddress
			}
			if h.LastSeen != nil {
				lastSeen, err := ptypes.TimestampProto(*h.LastSeen)
				if err != nil {
					log.Error(err)
				}
				host.LastSeen = lastSeen
			}

			response.Hosts = append(response.Hosts, host)
		}
	}

	return response, nil
}
{{- end }}
