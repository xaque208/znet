syntax = "proto3";

message SearchRequest {
  string hosts = 1;
  string domain = 2;
  string kernel = 3;
}

message SearchResponse {
  repeated Host hosts = 1;
  repeated UnknownHost unknown_hosts = 2;
}

message UnknownHost {
  string mac = 1;
  string ip = 2;
  string name = 3;
}

message Host {
  string name = 1;
  string description = 2;
  string platform = 3;
  string version = 4;
  string type = 5;
}

service Inventory {
  rpc Search(SearchRequest) returns (SearchResponse) {}
}

message Light {
  string type = 1;
  int32 id = 2;
  string name = 3;
  State state = 4;
}

message LightGroup {
  string type = 1;
  int32 id = 2;
  string name = 3;
  State state = 4;
  repeated int32 lights = 5;
}

message State {
  bool on = 1;
  int32 brightness = 2;
}

message LightRequest {}

message LightResponse {
  repeated Light lights = 1;
  repeated LightGroup groups = 2;
}

service Lights {
  rpc Off(LightGroup) returns (LightResponse) {}
  rpc On(LightGroup) returns (LightResponse) {}
  rpc Status(LightRequest) returns (LightResponse) {}

  rpc Brightness(LightGroup) returns (LightResponse) {}
  rpc Alert(LightGroup) returns (LightResponse) {}
}

message Event {
  string name = 1;
  bytes payload = 2;
}

message EventResponse {
  bool errors = 1;
  string message = 2;
}

message EventSub {
  repeated string name = 1;
}

service Events {
  rpc NoticeEvent(Event) returns (EventResponse) {}
  rpc SubscribeEvents(EventSub) returns (stream Event) {}
}

// <discovery_prefix>/<component>/[<node_id>/]<object_id>/config
message DeviceDiscovery {
  string DiscoveryPrefix = 1;
  string Component = 2;
  string NodeID = 3;
  string ObjectID = 4;
  repeated string Endpoint = 5;
  bytes Message = 6;
}

message NoticeResponse {}

service Things {
  rpc Notice(DeviceDiscovery) returns (NoticeResponse);
}
