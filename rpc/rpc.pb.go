// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchRequest struct {
	Hosts                string   `protobuf:"bytes,1,opt,name=hosts,proto3" json:"hosts,omitempty"`
	Domain               string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Kernel               string   `protobuf:"bytes,3,opt,name=kernel,proto3" json:"kernel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetHosts() string {
	if m != nil {
		return m.Hosts
	}
	return ""
}

func (m *SearchRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SearchRequest) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

type SearchResponse struct {
	Hosts                []*Host  `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type Host struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Platform             string   `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *Host) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Host.Unmarshal(m, b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Host.Marshal(b, m, deterministic)
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return xxx_messageInfo_Host.Size(m)
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Host) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Host) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Host) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Host) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Light struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State                *State   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Light) Reset()         { *m = Light{} }
func (m *Light) String() string { return proto.CompactTextString(m) }
func (*Light) ProtoMessage()    {}
func (*Light) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *Light) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Light.Unmarshal(m, b)
}
func (m *Light) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Light.Marshal(b, m, deterministic)
}
func (m *Light) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Light.Merge(m, src)
}
func (m *Light) XXX_Size() int {
	return xxx_messageInfo_Light.Size(m)
}
func (m *Light) XXX_DiscardUnknown() {
	xxx_messageInfo_Light.DiscardUnknown(m)
}

var xxx_messageInfo_Light proto.InternalMessageInfo

func (m *Light) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Light) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Light) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Light) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type LightGroup struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State                *State   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Lights               []int32  `protobuf:"varint,5,rep,packed,name=lights,proto3" json:"lights,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightGroup) Reset()         { *m = LightGroup{} }
func (m *LightGroup) String() string { return proto.CompactTextString(m) }
func (*LightGroup) ProtoMessage()    {}
func (*LightGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}

func (m *LightGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightGroup.Unmarshal(m, b)
}
func (m *LightGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightGroup.Marshal(b, m, deterministic)
}
func (m *LightGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightGroup.Merge(m, src)
}
func (m *LightGroup) XXX_Size() int {
	return xxx_messageInfo_LightGroup.Size(m)
}
func (m *LightGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_LightGroup.DiscardUnknown(m)
}

var xxx_messageInfo_LightGroup proto.InternalMessageInfo

func (m *LightGroup) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LightGroup) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LightGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LightGroup) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *LightGroup) GetLights() []int32 {
	if m != nil {
		return m.Lights
	}
	return nil
}

type State struct {
	On                   bool     `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	Brightness           int32    `protobuf:"varint,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

func (m *State) GetBrightness() int32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type LightRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightRequest) Reset()         { *m = LightRequest{} }
func (m *LightRequest) String() string { return proto.CompactTextString(m) }
func (*LightRequest) ProtoMessage()    {}
func (*LightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}

func (m *LightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightRequest.Unmarshal(m, b)
}
func (m *LightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightRequest.Marshal(b, m, deterministic)
}
func (m *LightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightRequest.Merge(m, src)
}
func (m *LightRequest) XXX_Size() int {
	return xxx_messageInfo_LightRequest.Size(m)
}
func (m *LightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LightRequest proto.InternalMessageInfo

type LightResponse struct {
	Lights               []*Light      `protobuf:"bytes,1,rep,name=lights,proto3" json:"lights,omitempty"`
	Groups               []*LightGroup `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LightResponse) Reset()         { *m = LightResponse{} }
func (m *LightResponse) String() string { return proto.CompactTextString(m) }
func (*LightResponse) ProtoMessage()    {}
func (*LightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{7}
}

func (m *LightResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightResponse.Unmarshal(m, b)
}
func (m *LightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightResponse.Marshal(b, m, deterministic)
}
func (m *LightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightResponse.Merge(m, src)
}
func (m *LightResponse) XXX_Size() int {
	return xxx_messageInfo_LightResponse.Size(m)
}
func (m *LightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LightResponse proto.InternalMessageInfo

func (m *LightResponse) GetLights() []*Light {
	if m != nil {
		return m.Lights
	}
	return nil
}

func (m *LightResponse) GetGroups() []*LightGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*Host)(nil), "Host")
	proto.RegisterType((*Light)(nil), "Light")
	proto.RegisterType((*LightGroup)(nil), "LightGroup")
	proto.RegisterType((*State)(nil), "State")
	proto.RegisterType((*LightRequest)(nil), "LightRequest")
	proto.RegisterType((*LightResponse)(nil), "LightResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x37, 0x49, 0x6d, 0xb6, 0x53, 0x1a, 0xa4, 0x11, 0x42, 0x51, 0x41, 0xab, 0xca, 0xcb,
	0xa1, 0x68, 0x85, 0x0f, 0xe1, 0x00, 0x67, 0x2e, 0x80, 0xb4, 0xd2, 0x4a, 0x59, 0x38, 0x72, 0xc8,
	0x36, 0xee, 0x36, 0xa2, 0xb5, 0x83, 0xed, 0xae, 0xb4, 0x3c, 0x00, 0x2f, 0xc3, 0x4b, 0x22, 0xff,
	0x69, 0x9a, 0x4a, 0x48, 0x3d, 0x71, 0xf3, 0xf7, 0xcd, 0x64, 0x7e, 0x63, 0xcf, 0x04, 0xc6, 0xba,
	0x5b, 0xf2, 0x4e, 0x2b, 0xab, 0xd8, 0x37, 0x98, 0xde, 0x8a, 0x5a, 0x2f, 0xd7, 0x95, 0xf8, 0xb9,
	0x13, 0xc6, 0xe2, 0x73, 0x20, 0x6b, 0x65, 0xac, 0x29, 0x92, 0x79, 0xb2, 0x18, 0x57, 0x41, 0xe0,
	0x0b, 0xa0, 0x8d, 0xda, 0xd6, 0xad, 0x2c, 0x52, 0x6f, 0x47, 0xe5, 0xfc, 0x1f, 0x42, 0x4b, 0xb1,
	0x29, 0xb2, 0xe0, 0x07, 0xc5, 0xde, 0x42, 0xbe, 0x2f, 0x6b, 0x3a, 0x25, 0x8d, 0xc0, 0x97, 0x87,
	0xba, 0xd9, 0x62, 0x52, 0x12, 0xfe, 0x59, 0x19, 0x1b, 0xcb, 0xb3, 0xdf, 0x09, 0x8c, 0x9c, 0x46,
	0x84, 0x91, 0xac, 0xb7, 0x22, 0xc2, 0xfd, 0x19, 0xe7, 0x30, 0x69, 0x84, 0x59, 0xea, 0xb6, 0xb3,
	0xad, 0xda, 0x37, 0x30, 0xb4, 0x70, 0x06, 0xe7, 0xdd, 0xa6, 0xb6, 0x2b, 0xa5, 0xb7, 0xb1, 0x8f,
	0x5e, 0x63, 0x01, 0x4f, 0x1e, 0x84, 0x36, 0xee, 0xcb, 0x91, 0x0f, 0xed, 0xa5, 0x63, 0xd9, 0xc7,
	0x4e, 0x14, 0x24, 0xb0, 0xdc, 0x99, 0x7d, 0x07, 0x72, 0xdd, 0xde, 0xaf, 0x6d, 0x1f, 0x4c, 0x0e,
	0x41, 0xcc, 0x21, 0x6d, 0x1b, 0xcf, 0x27, 0x55, 0xda, 0x36, 0x7d, 0xb3, 0xd9, 0xa0, 0xd9, 0x57,
	0x40, 0x8c, 0xad, 0xad, 0xf0, 0xb0, 0x49, 0x49, 0xf9, 0xad, 0x53, 0x55, 0x30, 0xd9, 0x2f, 0x00,
	0x5f, 0xfe, 0x93, 0x56, 0xbb, 0xee, 0xff, 0x30, 0xdc, 0x48, 0x36, 0x8e, 0x61, 0x0a, 0x32, 0xcf,
	0x16, 0xa4, 0x8a, 0x8a, 0xbd, 0x07, 0xe2, 0xf3, 0x1c, 0x42, 0x49, 0x0f, 0x3d, 0xaf, 0x52, 0x25,
	0xf1, 0x02, 0xe0, 0x4e, 0xbb, 0x1c, 0x29, 0x8c, 0x89, 0xe8, 0x81, 0xc3, 0x72, 0x78, 0xea, 0x9b,
	0x8e, 0x1b, 0xc2, 0xbe, 0xc2, 0x34, 0xea, 0x38, 0xda, 0x8b, 0x9e, 0x18, 0x66, 0x4b, 0x79, 0x88,
	0x47, 0x17, 0x2f, 0x81, 0xde, 0xbb, 0x0b, 0xbb, 0xe2, 0x2e, 0x3e, 0xe1, 0x87, 0x47, 0xa8, 0x62,
	0xa8, 0xfc, 0x00, 0xe3, 0x2f, 0xf2, 0x41, 0x48, 0xab, 0xf4, 0x23, 0x5e, 0x01, 0x0d, 0xeb, 0x83,
	0x39, 0x3f, 0x5a, 0xcf, 0xd9, 0x33, 0x7e, 0xbc, 0x57, 0xec, 0xac, 0xfc, 0x93, 0x00, 0xbd, 0x0e,
	0xa4, 0xd7, 0x90, 0xdd, 0xac, 0x56, 0x38, 0x04, 0xcc, 0x72, 0x7e, 0xd4, 0x2d, 0x3b, 0xc3, 0x4b,
	0x48, 0x6f, 0xe4, 0xa9, 0xa4, 0x37, 0x40, 0xdd, 0x73, 0xed, 0x0c, 0x4e, 0xf9, 0xf0, 0xfa, 0xff,
	0x48, 0xbd, 0x02, 0xf8, 0xd8, 0x3f, 0xd7, 0x89, 0xba, 0x77, 0xd4, 0xff, 0x77, 0xef, 0xfe, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x77, 0x2c, 0x9d, 0x58, 0x84, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/Inventory/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterInventoryServer(s *grpc.Server, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Inventory_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// LightsClient is the client API for Lights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightsClient interface {
	Off(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
	On(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
	Status(ctx context.Context, in *LightRequest, opts ...grpc.CallOption) (*LightResponse, error)
	Brightness(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error)
}

type lightsClient struct {
	cc *grpc.ClientConn
}

func NewLightsClient(cc *grpc.ClientConn) LightsClient {
	return &lightsClient{cc}
}

func (c *lightsClient) Off(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/Lights/Off", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) On(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/Lights/On", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Status(ctx context.Context, in *LightRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/Lights/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Brightness(ctx context.Context, in *LightGroup, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/Lights/Brightness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightsServer is the server API for Lights service.
type LightsServer interface {
	Off(context.Context, *LightGroup) (*LightResponse, error)
	On(context.Context, *LightGroup) (*LightResponse, error)
	Status(context.Context, *LightRequest) (*LightResponse, error)
	Brightness(context.Context, *LightGroup) (*LightResponse, error)
}

func RegisterLightsServer(s *grpc.Server, srv LightsServer) {
	s.RegisterService(&_Lights_serviceDesc, srv)
}

func _Lights_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lights/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Off(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lights/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).On(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lights/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Status(ctx, req.(*LightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Brightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Brightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lights/Brightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Brightness(ctx, req.(*LightGroup))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Lights",
	HandlerType: (*LightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Off",
			Handler:    _Lights_Off_Handler,
		},
		{
			MethodName: "On",
			Handler:    _Lights_On_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Lights_Status_Handler,
		},
		{
			MethodName: "Brightness",
			Handler:    _Lights_Brightness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
